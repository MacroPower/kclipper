version: "3"

vars:
  GO_FILES_CMD: >-
    go list -f {{"{{.Dir}}"}} ./... | xargs -I {} find {} -name "*.go"
  SDK_PATH: ".nixpkgs/vendor/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
  FRAMEWORK_PATH: "{{.SDK_PATH}}/System/Library/Frameworks"
  C_ENV: "{{OS | upper}}_{{ARCH | upper}}"
  PRETTIER_TARGETS: "*.{yaml,md,json} **/*.{yaml,md,json}"

env:
  HOSTNAME:
    sh: hostname
  HELM_VERSION:
    sh: helm version --template="{{ "{{.Version}}" }}"
  KCL_VERSION:
    sh: go list -f "{{ "{{.Version}}" }}" -m kcl-lang.io/lib
  CC_LINUX_AMD64: zig cc -target x86_64-linux-gnu
  CC_LINUX_ARM64: zig cc -target aarch64-linux-gnu
  CC_DARWIN_AMD64: zig cc -target x86_64-macos-none -F{{ .FRAMEWORK_PATH }}
  CC_DARWIN_ARM64: zig cc -target aarch64-macos-none -F{{ .FRAMEWORK_PATH }}
  CXX_LINUX_AMD64: zig c++ -target x86_64-linux-gnu
  CXX_LINUX_ARM64: zig c++ -target aarch64-linux-gnu
  CXX_DARWIN_AMD64: zig c++ -target x86_64-macos-none -F{{ .FRAMEWORK_PATH }}
  CXX_DARWIN_ARM64: zig c++ -target aarch64-macos-none -F{{ .FRAMEWORK_PATH }}
  BUILD_TAGS: netgo

tasks:
  default:
    cmds:
      - task: format
      - task: lint
      - task: test
      - task: build

  format:
    desc: Runs all format targets
    deps: [go-format, prettier-format]

  lint:
    desc: Runs all lint targets
    deps:
      - go-lint
      - renovate-lint
      - actions-lint
      - goreleaser-lint
      - prettier-lint

  test:
    desc: Runs all test targets
    deps: [go-test]

  pre-commit:
    desc: Runs all pre-commit targets
    deps: [lint, test]

  build:
    desc: Runs all build targets
    deps: [go-build]

  release:
    desc: Runs all release targets
    deps: [go-release]

  dev-install:
    desc: Installs development dependencies
    cmds:
      - devbox install
      - nix-collect-garbage

  install:
    desc: Builds and installs binaries
    cmds:
      - goreleaser build --snapshot --clean --single-target
      - sudo cp ./dist/*/kcl /usr/local/bin

  go-format:
    desc: Formats Go code including imports
    cmds:
      - golangci-lint run --fix

  go-lint:
    desc: Lints Go code
    cmds:
      - golangci-lint run

  go-test:
    desc: Run Go tests
    summary: |
      Run Go tests

      Args:
        PKG: Go package to test (default: ./...)
        FLAGS: Additional flags to pass to `go test` (default: "")
        PKG_FLAGS: Additional flags to pass to test packages (default: "")
    vars:
      PKG: '{{.PKG | default "./..."}}'
      FLAGS: '{{.FLAGS | default ""}}'
      PKG_FLAGS: '{{.PKG_FLAGS | default ""}}'
    cmds:
      - go test {{.FLAGS}} {{.PKG}} {{.PKG_FLAGS}}

  go-cover:
    desc: Runs Go tests with coverage
    cmds:
      - go install gotest.tools/gotestsum@latest
      - cmd: mkdir -p .test/
        silent: true
      - gotestsum --junitfile=.test/junit.xml --format=pkgname -- -race -vet=all -coverprofile=.test/cover.out ./...

  go-bench:
    desc: Run Go benchmarks
    summary: |
      Run Go benchmarks

      Args:
        PKG: Go package to test (default: ./...)
        FLAGS: Additional flags to pass to `go test` (default: "")

      Examples:
        task go-bench PKG=./pkg/helm FLAGS="-cpuprofile profile.out -run=^\$"
    vars:
      PKG: '{{.PKG | default "./..."}}'
      FLAGS: '{{.FLAGS | default ""}}'
    cmds:
      - go test -bench=. -benchmem -tags={{.BUILD_TAGS}} {{.FLAGS}} {{.PKG}}

  go-gen:
    desc: Generates Go code
    cmds:
      - go generate ./...

  go-build:
    desc: Builds Go binaries
    vars:
      FLAGS: '{{.FLAGS | default "--skip=docker,homebrew,nix,sign"}}'
    cmds:
      - goreleaser release --snapshot --clean {{ .FLAGS }}

  go-build-images:
    desc: Builds Go binaries and Docker images
    vars:
      FLAGS: '{{.FLAGS | default "--skip=homebrew,nix,sign"}}'
    cmds:
      - goreleaser release --snapshot --clean {{ .FLAGS }}

  go-release:
    desc: Releases Go binaries
    vars:
      FLAGS: '{{.FLAGS | default ""}}'
    cmds:
      - goreleaser release --clean {{.FLAGS}}

  prettier-format:
    desc: Formats YAML, JSON, and Markdown files
    cmds:
      - prettier --config ./.prettierrc.yaml -w {{.PRETTIER_TARGETS}}

  prettier-lint:
    desc: Lints YAML, JSON, and Markdown files
    cmds:
      - prettier --config ./.prettierrc.yaml --check {{.PRETTIER_TARGETS}}

  pull-upstream:
    desc: Pulls upstream KCL CLI
    sources:
      - .tmp/kcl
    cmds:
      - |
        mkdir -p ./.tmp/bin
        curl -Lq https://github.com/kcl-lang/cli/releases/download/v0.11.0/kcl-v0.11.0-{{OS}}-{{ARCH}}.tar.gz | \
          tar -xzO kcl > ./.tmp/bin/kcl
        chmod +x ./.tmp/bin/kcl

  bench-diff:
    desc: Compares benchmark results
    deps:
      - task: go-build
        vars:
          FLAGS: "--single-target"
      - task: pull-upstream
    vars:
      KCLX_BIN: ../../dist/kclipper_{{OS}}_{{ARCH}}*/kcl
      KCL_CODE: no-charts.k
      KCL_HELM: 10-charts.k
      KCL_HELM_VALUES: 10-charts-with-values.k
    cmds:
      - cp ./.tmp/bin/kcl ./docs/benchmarks/kcl
      - defer: rm ./docs/benchmarks/kcl
      - |-
        cd docs/benchmarks
        hyperfine --warmup=50 --min-runs=1000 \
          --export-markdown ../README.md \
          --command-name "kcl(ipper) -V {{.KCL_CODE}}" \
          --command-name "kcl(ipper) -V {{.KCL_HELM}}" \
          --command-name "kcl(ipper) -V {{.KCL_HELM_VALUES}}" \
          --reference "kcl -V {{.KCL_CODE}}" \
          "{{.KCLX_BIN}} -V {{.KCL_CODE}}" \
          "{{.KCLX_BIN}} -V {{.KCL_HELM}}" \
          "{{.KCLX_BIN}} -V {{.KCL_HELM_VALUES}}"

  bench-diff-docker:
    desc: Compares benchmark results
    vars:
      DOCKER_MOUNTS: "-v ./.tmp:/tmp -v ./docs/benchmarks:/opt/benchmarks"
      KCL_CODE: benchmarks/no-charts.k
      KCL_HELM: benchmarks/10-charts.k
    cmds:
      - >-
        docker run --name=kcl -d --entrypoint=/usr/bin/bash {{.DOCKER_MOUNTS}}
        kcllang/kcl-arm64:latest -c "sleep 300"
      - defer: "docker rm kcl -f"
      - docker exec kcl kcl version
      - >-
        docker run --name=kclipper -d --entrypoint=/usr/bin/bash {{.DOCKER_MOUNTS}}
        ghcr.io/macropower/kclipper:v0.2.0-arm64 -c "sleep 300"
      - defer: "docker rm kclipper -f"
      - docker exec kclipper kcl version
      - >-
        hyperfine --warmup=1
        --command-name "docker ../{{.KCL_CODE}}"
        --command-name "docker ../{{.KCL_HELM}}"
        --reference "docker exec kcl kcl run /opt/{{.KCL_CODE}}"
        "docker exec kclipper kcl run /opt/{{.KCL_CODE}}"
        "docker exec kclipper kcl run /opt/{{.KCL_HELM}}"

  kcl-doc:
    desc: Generates KCL documentation
    summary: |
      Generates KCL documentation from a KCL module.

      Args:
        MODULE: KCL module to document

      Examples:
        task kcl-doc MODULE=helm
    requires:
      vars: [MODULE]
    cmds:
      - kcl doc generate --file-path=./modules/{{.MODULE}} --target=./modules/{{.MODULE}}
      - cat ./modules/{{.MODULE}}/docs/README.md >> ./modules/{{.MODULE}}/README.md
      - rm -rf ./modules/{{.MODULE}}/docs
      - task: prettier-format

  go-deadcode:
    desc: Finds dead code in Go
    summary: |
      Finds dead code in Go.

      Args:
        PKG: Go package(s) to evaluate (default: ./...)
        FLAGS: Additional flags to pass to `deadcode` (default: "")

      Examples:
        task go-deadcode FLAGS="-test -generated"
    vars:
      PKG: '{{.PKG | default "./..."}}'
      FLAGS: '{{.FLAGS | default ""}}'
    cmds:
      - go install golang.org/x/tools/cmd/deadcode@latest
      - deadcode {{.FLAGS}} {{.PKG}}

  go-bench-init:
    desc: Run Go benchmarks with init tracing
    cmds:
      - |
        echo "a=1" | GODEBUG=inittrace=1 kcl run - 2>&1 | awk '
        BEGIN {
            printf "%-100s %-15s %-15s %-10s %-10s\n", "Module", "Init Time (ms)", "Clock Time (ms)", "Bytes", "Allocs";
            printf "%-100s %-15s %-15s %-10s %-10s\n", "------", "--------------", "---------------", "-----", "------";
        }
        $1 == "init" {
            # Extract the relevant fields and format them into a table
            module = $2;
            init_time = substr($3, 2);  # Remove the "@" prefix
            clock_time = $5;
            bytes = $8;
            allocs = $10;
            printf "%-100s %-15s %-15s %-10s %-10s\n", module, init_time, clock_time, bytes, allocs;
        }' | tail -n +3 | sort -k3,3n

  run-chartmuseum:
    cmd: |-
      docker run --rm -it \
        -p 8080:8080 \
        -e DEBUG=1 \
        -e STORAGE=local \
        -e STORAGE_LOCAL_ROOTDIR=/charts \
        -e BASIC_AUTH_USER=user \
        -e BASIC_AUTH_PASS=hunter2 \
        -v $(pwd)/charts:/charts \
        ghcr.io/helm/chartmuseum:v0.16.2
    # helm package .
    # curl -u user:hunter2 --data-binary "@simple-chart-0.1.0.tgz" http://localhost:8080/api/charts

  renovate-lint:
    desc: Lints Renovate configuration
    cmds:
      - renovate-config-validator .github/renovate.json5

  actions-lint:
    desc: Lints GitHub Actions
    cmds:
      - zizmor .github/workflows --config .github/zizmor.yaml

  goreleaser-lint:
    desc: Lints GoReleaser configuration
    cmds:
      - goreleaser check

  install-hooks:
    desc: Install git hooks
    vars:
      PRE_COMMIT_FILE: "{{.ROOT_DIR}}/.git/hooks/pre-commit"
      COMMIT_MSG_FILE: "{{.ROOT_DIR}}/.git/hooks/commit-msg"
    env:
      PRE_COMMIT: |-
        #!/bin/bash

        git stash --keep-index --include-untracked --quiet

        exitCode=0

        devbox run -- task {{.TASK}} || exitCode=$?
        devbox run -- task pre-commit || exitCode=$?

        if [ $exitCode -eq 0 ]; then
          git add .
        else
          git stash --keep-index --include-untracked --quiet && git stash drop --quiet
        fi

        git stash pop --quiet

        exit $exitCode
      COMMIT_MSG: |-
        #!/bin/bash

        devbox run -- conform enforce --commit-msg-file $1
    cmds:
      - echo "${PRE_COMMIT}" > {{.PRE_COMMIT_FILE}}
      - chmod u+x {{.PRE_COMMIT_FILE}}
      - echo "${COMMIT_MSG}" > {{.COMMIT_MSG_FILE}}
      - chmod u+x {{.COMMIT_MSG_FILE}}
