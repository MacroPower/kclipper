version: "3"

vars:
  FILES_TO_FMT:
    sh: find . -path ./vendor -prune -o -name '*.go' -print
  FILES_TO_FMT_STR: >-
    {{ splitList "\n" .FILES_TO_FMT | join " " }}
  SDK_PATH: ".nixpkgs/vendor/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
  FRAMEWORK_PATH: "{{.SDK_PATH}}/System/Library/Frameworks"
  C_ENV: "{{OS | upper}}_{{ARCH | upper}}"

env:
  HOSTNAME:
    sh: hostname
  HELM_VERSION:
    sh: helm version --template="{{ "{{.Version}}" }}"
  CC_LINUX_AMD64: zig cc -target x86_64-linux-gnu
  CC_LINUX_ARM64: zig cc -target aarch64-linux-gnu
  CC_DARWIN_AMD64: zig cc -target x86_64-macos-none -F{{ .FRAMEWORK_PATH }}
  CC_DARWIN_ARM64: zig cc -target aarch64-macos-none -F{{ .FRAMEWORK_PATH }}
  CXX_LINUX_AMD64: zig c++ -target x86_64-linux-gnu
  CXX_LINUX_ARM64: zig c++ -target aarch64-linux-gnu
  CXX_DARWIN_AMD64: zig c++ -target x86_64-macos-none -F{{ .FRAMEWORK_PATH }}
  CXX_DARWIN_ARM64: zig c++ -target aarch64-macos-none -F{{ .FRAMEWORK_PATH }}
  BUILD_TAGS: netgo,rpc

tasks:
  default:
    cmds:
      - task: format
      - task: lint
      - task: test
      - task: build

  format:
    desc: Runs all format targets
    deps: [go-format, prettier-format]

  lint:
    desc: Runs all lint targets
    deps: [go-lint]

  test:
    desc: Runs all test targets
    deps: [go-test]

  build:
    desc: Runs all build targets
    deps: [go-build]

  release:
    desc: Runs all release targets
    deps: [go-release]

  install:
    desc: Builds and installs binaries
    cmds:
      - goreleaser build --snapshot --clean --single-target
      - sudo cp ./dist/*/kcl /usr/local/bin

  go-format:
    desc: Formats Go code including imports
    cmds:
      - "gofumpt -w {{.FILES_TO_FMT_STR}}"
      - "goimports -w {{.FILES_TO_FMT_STR}}"

  go-lint:
    desc: Lints Go code
    cmds:
      - golangci-lint run

  go-test:
    desc: Tests Go code
    cmds:
      - |
        export CC=$CC_{{.C_ENV}} CXX=$CXX_{{.C_ENV}}
        go test -vet=all -tags={{.BUILD_TAGS}} ./...

  go-bench:
    desc: Run Go benchmarks
    summary: |
      Run Go benchmarks

      Args:
        PKG: Go package to test (default: ./...)
        FLAGS: Additional flags to pass to `go test` (default: "")

      Examples:
        task go-bench PKG=./pkg/helm FLAGS="-cpuprofile profile.out -run=^\$"
    vars:
      PKG: '{{.PKG | default "./..."}}'
      FLAGS: '{{.FLAGS | default ""}}'
    cmds:
      - |
        export CC=$CC_{{.C_ENV}} CXX=$CXX_{{.C_ENV}}
        go test -ldflags="-s -w" -bench=. -benchmem -tags={{.BUILD_TAGS}} {{.FLAGS}} {{.PKG}}

  go-build:
    desc: Builds Go binaries
    vars:
      FLAGS: '{{.FLAGS | default ""}}'
    cmds:
      - goreleaser build --snapshot --clean {{ .FLAGS }}

  go-build-images:
    desc: Builds Go binaries and Docker images
    cmds:
      - goreleaser release --snapshot --clean --skip=archive

  go-release:
    desc: Releases Go binaries and Docker images
    cmds:
      - goreleaser release --clean

  prettier-format:
    desc: Formats YAML, JSON, and Markdown files
    cmds:
      - prettier --config ./.prettierrc.yaml -w *.{yaml,md,json} **/*.{yaml,md,json}

  pull-upstream:
    desc: Pulls upstream KCL CLI
    sources:
      - .tmp/kcl
    cmds:
      - |
        mkdir -p ./.tmp/bin
        curl -Lq https://github.com/kcl-lang/cli/releases/download/v0.11.0/kcl-v0.11.0-{{OS}}-{{ARCH}}.tar.gz | \
          tar -xzO kcl > ./.tmp/bin/kcl
        chmod +x ./.tmp/bin/kcl

  bench-diff:
    desc: Compares benchmark results
    deps:
      - task: go-build
        vars:
          FLAGS: "--single-target"
      - task: pull-upstream
    vars:
      KCLX_BIN: dist/kclx_{{OS}}_{{ARCH}}*/kcl
      KCL_CODE: benchmarks/simple.k
      KCL_HELM: benchmarks/simple-helm.k
      KCL_HELM_VALUES: benchmarks/simple-helm-values.k
    cmds:
      - >-
        hyperfine --warmup=10
        --export-markdown ./benchmarks/README.md
        --command-name "kclx ./{{.KCL_CODE}}"
        --command-name "kclx ./{{.KCL_HELM}}"
        --command-name "kclx ./{{.KCL_HELM_VALUES}}"
        --reference ".tmp/bin/kcl ./{{.KCL_CODE}}"
        "{{.KCLX_BIN}} ./{{.KCL_CODE}}"
        "{{.KCLX_BIN}} ./{{.KCL_HELM}}"
        "{{.KCLX_BIN}} ./{{.KCL_HELM_VALUES}}"

  bench-diff-docker:
    desc: Compares benchmark results
    vars:
      DOCKER_MOUNTS: "-v ./.tmp:/tmp -v ./benchmarks:/opt/benchmarks"
      KCL_CODE: benchmarks/simple.k
      KCL_HELM: benchmarks/simple-helm.k
    cmds:
      - >-
        docker run --name=kcl -d --entrypoint=/usr/bin/bash {{.DOCKER_MOUNTS}}
        kcllang/kcl-arm64:latest -c "sleep 300"
      - defer: "docker rm kcl -f"
      - docker exec kcl kcl version
      - >-
        docker run --name=kclx -d --entrypoint=/usr/bin/bash {{.DOCKER_MOUNTS}}
        ghcr.io/macropower/kclx:v0.2.0-arm64 -c "sleep 300"
      - defer: "docker rm kclx -f"
      - docker exec kclx kcl version
      - >-
        hyperfine --warmup=1
        --command-name "docker ../{{.KCL_CODE}}"
        --command-name "docker ../{{.KCL_HELM}}"
        --reference "docker exec kcl kcl run /opt/{{.KCL_CODE}}"
        "docker exec kclx kcl run /opt/{{.KCL_CODE}}"
        "docker exec kclx kcl run /opt/{{.KCL_HELM}}"
