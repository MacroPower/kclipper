# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
version: 2

project_name: kclipper

env:
  - DOCKER_REGISTRY=ghcr.io/macropower

release:
  prerelease: auto

before:
  hooks:
    - go mod tidy

# https://github.com/goreleaser/example-zig-cgo/
builds:
  - id: kclipper
    main: ./cmd/kclipper
    binary: kcl
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
    env:
      - CGO_ENABLED=1
      - |
        {{- if and (eq .Os "linux")  (eq .Arch "amd64") -}} CC={{ .Env.CC_LINUX_AMD64  }} {{- end -}}
        {{- if and (eq .Os "linux")  (eq .Arch "arm64") -}} CC={{ .Env.CC_LINUX_ARM64  }} {{- end -}}
        {{- if and (eq .Os "darwin") (eq .Arch "amd64") -}} CC={{ .Env.CC_DARWIN_AMD64 }} {{- end -}}
        {{- if and (eq .Os "darwin") (eq .Arch "arm64") -}} CC={{ .Env.CC_DARWIN_ARM64 }} {{- end -}}
      - |
        {{- if and (eq .Os "linux")  (eq .Arch "amd64") -}} CXX={{ .Env.CXX_LINUX_AMD64  }} {{- end -}}
        {{- if and (eq .Os "linux")  (eq .Arch "arm64") -}} CXX={{ .Env.CXX_LINUX_ARM64  }} {{- end -}}
        {{- if and (eq .Os "darwin") (eq .Arch "amd64") -}} CXX={{ .Env.CXX_DARWIN_AMD64 }} {{- end -}}
        {{- if and (eq .Os "darwin") (eq .Arch "arm64") -}} CXX={{ .Env.CXX_DARWIN_ARM64 }} {{- end -}}
    ldflags:
      - -s -w
      - -X github.com/macropower/kclipper/pkg/version.Version={{.Version}}
      - -X github.com/macropower/kclipper/pkg/version.Branch={{.Branch}}
      - -X github.com/macropower/kclipper/pkg/version.BuildUser={{.Env.USER}}@{{.Env.HOSTNAME}}
      - -X github.com/macropower/kclipper/pkg/version.BuildDate={{.Date}}
    flags:
      - -trimpath
      - -tags={{ .Env.BUILD_TAGS }}
    buildmode: pie
    hooks:
      pre:
        - cmd: >-
            bash -c '
            curl -Ls $(
            curl -s "https://api.github.com/repos/kcl-lang/kcl/releases/tags/{{ .Env.KCL_VERSION }}" |
            jq -r ".assets[] | select(.name | test(\"kclvm-{{ .Env.KCL_VERSION }}-{{ .Os }}-{{ .Arch }}.tar.gz\")) | .browser_download_url"
            )
            | tar -zx
            && mv kclvm/bin/kcl-language-server .
            && rm -r kclvm
            '
          dir: "{{ dir .Path }}"
          output: true

archives:
  - formats: [tar.gz]
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    files:
      - src: "dist/*{{.Os}}_{{.Arch}}*/kcl-language-server"
        strip_parent: true
      - LICENSE

gomod:
  proxy: true

checksum:
  name_template: "checksums.txt"

source:
  enabled: true
  name_template: "{{ .ProjectName }}"

sboms:
  - artifacts: archive
  - id: source
    artifacts: source

# https://goreleaser.com/customization/sign
signs:
  - cmd: cosign
    certificate: "${artifact}.pem"
    args:
      - sign-blob
      - "--output-certificate=${certificate}"
      - "--output-signature=${signature}"
      - "${artifact}"
      - "--yes"
    artifacts: checksum
    output: true

notarize:
  # https://goreleaser.com/customization/notarize/#cross-platform
  macos:
    - enabled: '{{ isEnvSet "MACOS_SIGN_P12" }}'
      sign:
        certificate: "{{.Env.MACOS_SIGN_P12}}"
        password: "{{.Env.MACOS_SIGN_PASSWORD}}"
        entitlements: resources/entitlements.xml
      notarize:
        issuer_id: "{{.Env.MACOS_NOTARY_ISSUER_ID}}"
        key_id: "{{.Env.MACOS_NOTARY_KEY_ID}}"
        key: "{{.Env.MACOS_NOTARY_KEY}}"
        wait: true
        timeout: 30m

snapshot:
  version_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: Fixes
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

homebrew_casks:
  - name: kcl-lsp
    repository: &brewRepo
      owner: MacroPower
      name: homebrew-tap
    url:
      template: &archiveTemplate >-
        https://github.com/macropower/kclipper/releases/download/{{ .Tag }}/
        {{- .ProjectName }}_
        {{- title .Os }}_
        {{- if eq .Arch "amd64" }}x86_64
        {{- else if eq .Arch "386" }}i386
        {{- else }}{{ .Arch }}{{ end -}}
        {{- if .Arm }}v{{ .Arm }}{{ end -}}
        .tar.gz
    commit_msg_template: "chore: cask update for kcl-lsp {{ .Tag }}"
    commit_author: &commitAuthor
      name: botty-mcbottington
      email: 168950816+botty-mcbottington[bot]@users.noreply.github.com
    homepage: "https://github.com/kcl-lang/kcl"
    description: "KCL Language Server"
    license: "Apache License"
    skip_upload: auto
    binary: kcl-language-server
  - repository: *brewRepo
    url:
      template: *archiveTemplate
    commit_msg_template: "chore: cask update for {{ .ProjectName }} {{ .Tag }}"
    commit_author: *commitAuthor
    homepage: "https://github.com/macropower/kclipper"
    description: "Kclipper Command Line Interface"
    license: "Apache License"
    skip_upload: auto
    binary: kcl

nix:
  - name: kcl-lsp
    repository:
      owner: MacroPower
      name: nur-packages
    url_template: *archiveTemplate
    commit_msg_template: "chore: pkg update for kcl-lsp {{ .Tag }}"
    commit_author: *commitAuthor
    homepage: "https://github.com/kcl-lang/kcl"
    description: "KCL Language Server"
    license: "asl20"
    skip_upload: auto
    install: |
      mkdir -p $out/bin
      cp -vr ./kcl-language-server $out/bin/kcl-language-server
  - name: kclipper
    repository:
      owner: MacroPower
      name: nur-packages
    url_template: *archiveTemplate
    commit_msg_template: "chore: pkg update for {{ .ProjectName }} {{ .Tag }}"
    commit_author: *commitAuthor
    homepage: "https://github.com/macropower/kclipper"
    description: "Kclipper Command Line Interface"
    license: "asl20"
    skip_upload: auto

docker_manifests:
  - name_template: '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:latest'
    image_templates:
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-amd64'
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-arm64'
  - name_template: '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}'
    image_templates:
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-amd64'
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-arm64'
  - name_template: '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:v{{ .Major }}'
    image_templates:
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-amd64'
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-arm64'
  - name_template: '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:v{{ .Major }}.{{ .Minor }}'
    image_templates:
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-amd64'
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-arm64'

dockers:
  - goos: linux
    goarch: amd64
    dockerfile: Dockerfile
    use: buildx
    image_templates:
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-amd64'
    build_flag_templates:
      - '--platform=linux/amd64'
      - '--build-arg=HELM_VERSION={{.Env.HELM_VERSION}}'
      - '--label=org.opencontainers.image.title={{ .ProjectName }}'
      - '--label=org.opencontainers.image.version={{ .Tag }}'
      - '--label=org.opencontainers.image.revision={{ .FullCommit }}'
      - '--label=org.opencontainers.image.created={{ .Date }}'
      - '--label=org.opencontainers.image.source={{ .GitURL }}'
  - goos: linux
    goarch: arm64
    dockerfile: Dockerfile
    use: buildx
    image_templates:
      - '{{ .Env.DOCKER_REGISTRY }}/{{ .ProjectName }}:{{ .Tag }}-arm64'
    build_flag_templates:
      - '--platform=linux/arm64'
      - '--build-arg=HELM_VERSION={{.Env.HELM_VERSION}}'
      - '--label=org.opencontainers.image.title={{ .ProjectName }}'
      - '--label=org.opencontainers.image.version={{ .Tag }}'
      - '--label=org.opencontainers.image.revision={{ .FullCommit }}'
      - '--label=org.opencontainers.image.created={{ .Date }}'
      - '--label=org.opencontainers.image.source={{ .GitURL }}'

docker_signs:
  - cmd: cosign
    artifacts: images
    output: true
    args:
      - "sign"
      - "${artifact}@${digest}"
      - "--yes"
